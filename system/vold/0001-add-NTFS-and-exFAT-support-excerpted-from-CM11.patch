From 53e3470eea57d3bd80fcfeab75096dae1694fb1c Mon Sep 17 00:00:00 2001
From: DoloresPark <dolorespark@e-vertise.com>
Date: Sat, 5 Jul 2014 00:13:55 -0400
Subject: [PATCH] add NTFS and exFAT support (excerpted from CM11)

---
 Android.mk          |    6 +-
 CommandListener.cpp |   15 ++--
 Exfat.cpp           |  164 ++++++++++++++++++++++++++++++++++++++++++
 Exfat.h             |   30 ++++++++
 Ext4.cpp            |   49 ++++++++++++-
 Ext4.h              |    1 +
 Ntfs.cpp            |  198 +++++++++++++++++++++++++++++++++++++++++++++++++++
 Ntfs.h              |   33 +++++++++
 Volume.cpp          |  153 ++++++++++++++++++++++++++++++++-------
 Volume.h            |    2 +-
 VolumeManager.cpp   |   13 ++--
 VolumeManager.h     |    2 +-
 main.cpp            |    3 +-
 13 files changed, 627 insertions(+), 42 deletions(-)
 create mode 100644 Exfat.cpp
 create mode 100644 Exfat.h
 create mode 100644 Ntfs.cpp
 create mode 100644 Ntfs.h

diff --git a/Android.mk b/Android.mk
index 1a1d28a..5dbd7cc 100644
--- a/Android.mk
+++ b/Android.mk
@@ -11,6 +11,8 @@ common_src_files := \
 	Process.cpp \
 	Ext4.cpp \
 	Fat.cpp \
+	Ntfs.cpp \
+	Exfat.cpp \
 	Loop.cpp \
 	Devmapper.cpp \
 	ResponseCode.cpp \
@@ -29,7 +31,8 @@ common_c_includes := \
 	frameworks/native/include \
 	system/security/keystore \
 	hardware/libhardware/include/hardware \
-	system/security/softkeymaster/include/keymaster
+	system/security/softkeymaster/include/keymaster \
+	external/e2fsprogs/lib
 
 common_shared_libraries := \
 	libsysutils \
@@ -39,6 +42,7 @@ common_shared_libraries := \
 	liblog \
 	libdiskconfig \
 	libhardware_legacy \
+	libext2_blkid \
 	liblogwrap \
 	libext4_utils \
 	libf2fs_sparseblock \
diff --git a/CommandListener.cpp b/CommandListener.cpp
index 8003095..0df4d84 100644
--- a/CommandListener.cpp
+++ b/CommandListener.cpp
@@ -163,16 +163,20 @@ int CommandListener::VolumeCmd::runCommand(SocketClient *cli,
         }
         rc = vm->unmountVolume(argv[2], force, revert);
     } else if (!strcmp(argv[1], "format")) {
-        if (argc < 3 || argc > 4 ||
-            (argc == 4 && strcmp(argv[3], "wipe"))) {
-            cli->sendMsg(ResponseCode::CommandSyntaxError, "Usage: volume format <path> [wipe]", false);
+        if (argc < 3 || argc > 5 ||
+            (argc == 5 && strcmp(argv[4], "wipe") != 0)) {
+            cli->sendMsg(ResponseCode::CommandSyntaxError, "Usage: volume format <path> [fstype] [wipe]", false);
             return 0;
         }
         bool wipe = false;
-        if (argc >= 4 && !strcmp(argv[3], "wipe")) {
+        if (strcmp(argv[argc - 1], "wipe") == 0) {
             wipe = true;
         }
-        rc = vm->formatVolume(argv[2], wipe);
+        if (argc == 3 || (argc == 4 && wipe)) {
+            rc = vm->formatVolume(argv[2], wipe);
+        } else {
+            rc = vm->formatVolume(argv[2], wipe, argv[3]);
+        }
     } else if (!strcmp(argv[1], "share")) {
         if (argc != 4) {
             cli->sendMsg(ResponseCode::CommandSyntaxError,
@@ -216,7 +220,6 @@ int CommandListener::VolumeCmd::runCommand(SocketClient *cli,
     if (!rc) {
         cli->sendMsg(ResponseCode::CommandOkay, "volume operation succeeded", false);
     } else {
-        int erno = errno;
         rc = ResponseCode::convertFromErrno();
         cli->sendMsg(rc, "volume operation failed", true);
     }
diff --git a/Exfat.cpp b/Exfat.cpp
new file mode 100644
index 0000000..d149f44
--- /dev/null
+++ b/Exfat.cpp
@@ -0,0 +1,164 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+#include <sys/wait.h>
+
+#include <linux/kdev_t.h>
+#include <logwrap/logwrap.h>
+#include "VoldUtil.h"
+
+#define LOG_TAG "Vold"
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "Exfat.h"
+
+static char EXFAT_FSCK[] = "/system/bin/fsck.exfat";
+static char EXFAT_MKFS[] = "/system/bin/mkfs.exfat";
+static char EXFAT_MOUNT[] = "/system/bin/mount.exfat";
+
+int Exfat::doMount(const char *fsPath, const char *mountPoint,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask) {
+
+    int rc = -1;
+    char mountData[255];
+    const char *args[6];
+    int status;
+
+    if (access(EXFAT_MOUNT, X_OK)) {
+        SLOGE("Unable to mount, exFAT FUSE helper not found!");
+        return rc;
+    }
+
+    sprintf(mountData,
+            "noatime,nodev,nosuid,dirsync,uid=%d,gid=%d,fmask=%o,dmask=%o,%s,%s",
+            ownerUid, ownerGid, permMask, permMask,
+            (executable ? "exec" : "noexec"),
+            (ro ? "ro" : "rw"));
+
+    args[0] = EXFAT_MOUNT;
+    args[1] = "-o";
+    args[2] = mountData;
+    args[3] = fsPath;
+    args[4] = mountPoint;
+    args[5] = NULL;
+
+    SLOGW("Executing exFAT mount (%s) -> (%s)", fsPath, mountPoint);
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        strcat(mountData, ",ro");
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+    }
+
+    return rc;
+}
+
+int Exfat::check(const char *fsPath) {
+
+    int rc = -1;
+    int status;
+
+    if (access(EXFAT_FSCK, X_OK)) {
+        SLOGW("Skipping fs checks, exfatfsck not found.\n");
+        return 0;
+    }
+
+    do {
+        const char *args[3];
+        args[0] = EXFAT_FSCK;
+        args[1] = fsPath;
+        args[2] = NULL;
+
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+        switch(rc) {
+        case 0:
+            SLOGI("exFAT filesystem check completed OK.\n");
+            return 0;
+        case 1:
+            SLOGI("exFAT filesystem check completed, errors corrected OK.\n");
+            return 0;
+        case 2:
+            SLOGE("exFAT filesystem check completed, errors corrected, need reboot.\n");
+            return 0;
+        case 4:
+            SLOGE("exFAT filesystem errors left uncorrected.\n");
+            return 0;
+        case 8:
+            SLOGE("exfatfsck operational error.\n");
+            errno = EIO;
+            return -1;
+        default:
+            SLOGE("exFAT filesystem check failed (unknown exit code %d).\n", rc);
+            errno = EIO;
+            return -1;
+        }
+    } while (0);
+
+    return 0;
+}
+
+int Exfat::format(const char *fsPath) {
+
+    const char *args[3];
+    int rc = -1;
+    int status;
+
+    if (access(EXFAT_MKFS, X_OK)) {
+        SLOGE("Unable to format, mkexfatfs not found.");
+        return -1;
+    }
+
+    args[0] = EXFAT_MKFS;
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    if (rc == 0) {
+        SLOGI("Filesystem (exFAT) formatted OK");
+        return 0;
+    } else {
+        SLOGE("Format (exFAT) failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
diff --git a/Exfat.h b/Exfat.h
new file mode 100644
index 0000000..94c1d05
--- /dev/null
+++ b/Exfat.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _EXFAT_H
+#define _EXFAT_H
+
+#include <unistd.h>
+
+class Exfat {
+public:
+    static int doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
+            bool executable, int ownerUid, int ownerGid, int permMask);
+    static int check(const char *fsPath);
+    static int format(const char *fsPath);
+};
+
+#endif
diff --git a/Ext4.cpp b/Ext4.cpp
index dc31fd0..3d119c7 100644
--- a/Ext4.cpp
+++ b/Ext4.cpp
@@ -43,7 +43,8 @@
 #include "Ext4.h"
 #include "VoldUtil.h"
 
-#define MKEXT4FS_PATH "/system/bin/make_ext4fs"
+static char E2FSCK_PATH[] = "/system/bin/e2fsck";
+static char MKEXT4FS_PATH[] = "/system/bin/make_ext4fs";
 #define RESIZE2FS_PATH "/system/bin/resize2fs"
 
 int Ext4::doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
@@ -68,6 +69,52 @@ int Ext4::doMount(const char *fsPath, const char *mountPoint, bool ro, bool remo
     return rc;
 }
 
+int Ext4::check(const char *fsPath) {
+    if (access(E2FSCK_PATH, X_OK)) {
+        SLOGW("Skipping fs checks.\n");
+        return 0;
+    }
+
+    int rc = -1;
+    int status;
+    do {
+        const char *args[5];
+        args[0] = E2FSCK_PATH;
+        args[1] = "-p";
+        args[2] = "-f";
+        args[3] = fsPath;
+        args[4] = NULL;
+
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+        switch(rc) {
+        case 0:
+            SLOGI("EXT4 Filesystem check completed OK.\n");
+            return 0;
+        case 1:
+            SLOGI("EXT4 Filesystem check completed, errors corrected OK.\n");
+            return 0;
+        case 2:
+            SLOGE("EXT4 Filesystem check completed, errors corrected, need reboot.\n");
+            return 0;
+        case 4:
+            SLOGE("EXT4 Filesystem errors left uncorrected.\n");
+            return 0;
+        case 8:
+            SLOGE("E2FSCK Operational error.\n");
+            errno = EIO;
+            return -1;
+        default:
+            SLOGE("EXT4 Filesystem check failed (unknown exit code %d).\n", rc);
+            errno = EIO;
+            return -1;
+        }
+    } while (0);
+
+    return 0;
+}
+
 int Ext4::resize(const char *fspath, unsigned int numSectors) {
     const char *args[4];
     char* size_str;
diff --git a/Ext4.h b/Ext4.h
index c768f5a..5b01a53 100644
--- a/Ext4.h
+++ b/Ext4.h
@@ -23,6 +23,7 @@ class Ext4 {
 public:
     static int doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
             bool executable);
+    static int check(const char *fsPath);
     static int format(const char *fsPath, unsigned int numSectors, const char *mountpoint);
     static int resize(const char *fsPath, unsigned int numSectors);
 };
diff --git a/Ntfs.cpp b/Ntfs.cpp
new file mode 100644
index 0000000..b185317
--- /dev/null
+++ b/Ntfs.cpp
@@ -0,0 +1,198 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * Copyright (C) 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+
+#include <linux/kdev_t.h>
+#include <linux/fs.h>
+#include <logwrap/logwrap.h>
+#include "VoldUtil.h"
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "Ntfs.h"
+#include "VoldUtil.h"
+
+static char NTFS_FIX_PATH[] = "/system/bin/ntfsfix";
+static char NTFS_MOUNT_PATH[] = "/system/bin/ntfs-3g";
+static char MKNTFS_PATH[] = "/system/bin/mkntfs";
+
+int Ntfs::check(const char *fsPath) {
+
+    if (access(NTFS_FIX_PATH, X_OK)) {
+        SLOGW("Skipping fs checks\n");
+        return 0;
+    }
+
+    int rc = 0;
+    int status;
+    const char *args[4];
+    /* we first use -n to do ntfs detection */
+    args[0] = NTFS_FIX_PATH;
+    args[1] = "-n";
+    args[2] = fsPath;
+    args[3] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+    if (rc) {
+        errno = ENODATA;
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem existed");
+
+    /* do the real fix */
+    /* redo the ntfsfix without -n to fix problems */
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+    if (rc) {
+        errno = EIO;
+        SLOGE("Filesystem check failed (unknown exit code %d)", rc);
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem check completed OK");
+    return 0;
+}
+
+int Ntfs::doMount(const char *fsPath, const char *mountPoint,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    int rc;
+    char mountData[255];
+    const char *args[6];
+    int status;
+
+    /*
+     * Note: This is a temporary hack. If the sampling profiler is enabled,
+     * we make the SD card world-writable so any process can write snapshots.
+     *
+     * TODO: Remove this code once we have a drop box in system_server.
+     */
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.sampling_profiler", value, "");
+    if (value[0] == '1') {
+        SLOGW("The SD card is world-writable because the"
+            " 'persist.sampling_profiler' system property is set to '1'.");
+        permMask = 0;
+    }
+
+    sprintf(mountData,
+            "utf8,uid=%d,gid=%d,fmask=%o,dmask=%o,"
+	    "shortname=mixed,nodev,nosuid,dirsync",
+            ownerUid, ownerGid, permMask, permMask);
+
+    if (!executable)
+        strcat(mountData, ",noexec");
+    if (ro)
+        strcat(mountData, ",ro");
+    if (remount)
+        strcat(mountData, ",remount");
+
+    SLOGD("Mounting ntfs with options:%s\n", mountData);
+
+    args[0] = NTFS_MOUNT_PATH;
+    args[1] = "-o";
+    args[2] = mountData;
+    args[3] = fsPath;
+    args[4] = mountPoint;
+    args[5] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        strcat(mountData, ",ro");
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    }
+
+    if (rc == 0 && createLost) {
+        char *lost_path;
+        asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+        if (access(lost_path, F_OK)) {
+            /*
+             * Create a LOST.DIR in the root so we have somewhere to put
+             * lost cluster chains (fsck_msdos doesn't currently do this)
+             */
+            if (mkdir(lost_path, 0755)) {
+                SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+            }
+        }
+        free(lost_path);
+    }
+
+    return rc;
+}
+
+int Ntfs::format(const char *fsPath, bool wipe) {
+
+    const char *args[4];
+    int rc = -1;
+    int status;
+
+    if (access(MKNTFS_PATH, X_OK)) {
+        SLOGE("Unable to format, mkntfs not found.");
+        return -1;
+    }
+
+    args[0] = MKNTFS_PATH;
+    if (wipe) {
+        args[1] = fsPath;
+        args[2] = NULL;
+    } else {
+        args[1] = "-f";
+        args[2] = fsPath;
+        args[3] = NULL;
+    }
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    if (rc == 0) {
+        SLOGI("Filesystem (NTFS) formatted OK");
+        return 0;
+    } else {
+        SLOGE("Format (NTFS) failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
diff --git a/Ntfs.h b/Ntfs.h
new file mode 100644
index 0000000..92a8a64
--- /dev/null
+++ b/Ntfs.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * Copyright (C) 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _NTFS_H
+#define _NTFS_H
+
+#include <unistd.h>
+
+class Ntfs {
+public:
+    static int check(const char *fsPath);
+    static int doMount(const char *fsPath, const char *mountPoint,
+                       bool ro, bool remount, bool executable,
+                       int ownerUid, int ownerGid, int permMask,
+                       bool createLost);
+    static int format(const char *fsPath, bool wipe);
+};
+
+#endif
diff --git a/Volume.cpp b/Volume.cpp
index ca56d1c..bb47c4d 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -35,6 +35,8 @@
 
 #include <private/android_filesystem_config.h>
 
+#include <blkid/blkid.h>
+
 #define LOG_TAG "Vold"
 
 #include <cutils/fs.h>
@@ -45,9 +47,13 @@
 #include "Volume.h"
 #include "VolumeManager.h"
 #include "ResponseCode.h"
+#include "Ext4.h"
 #include "Fat.h"
 #include "Process.h"
 #include "cryptfs.h"
+#include "Ntfs.h"
+#include "Exfat.h"
+#include "VoldUtil.h"
 
 extern "C" void dos_partition_dec(void const *pp, struct dos_partition *d);
 extern "C" void dos_partition_enc(void *pp, struct dos_partition *d);
@@ -110,6 +116,22 @@ static const char *stateToStr(int state) {
         return "Unknown-Error";
 }
 
+char *getFsType(const char * devicePath) {
+    char *fstype = NULL;
+
+    SLOGD("Trying to get filesystem type for %s \n", devicePath);
+
+    fstype = blkid_get_tag_value(NULL, "TYPE", devicePath);
+    if (fstype) {
+        SLOGD("Found %s filesystem on %s\n", fstype, devicePath);
+    } else {
+        SLOGE("None or unknown filesystem on %s\n", devicePath);
+        return NULL;
+    }
+
+    return fstype;
+}
+
 Volume::Volume(VolumeManager *vm, const fstab_rec* rec, int flags) {
     mVm = vm;
     mDebug = false;
@@ -229,7 +251,9 @@ int Volume::createDeviceNode(const char *path, int major, int minor) {
     return 0;
 }
 
-int Volume::formatVol(bool wipe) {
+int Volume::formatVol(bool wipe, const char* fstype) {
+
+    char* fstype2 = NULL;
 
     if (getState() == Volume::State_NoMedia) {
         errno = ENODEV;
@@ -271,16 +295,38 @@ int Volume::formatVol(bool wipe) {
     sprintf(devicePath, "/dev/block/vold/%d:%d",
             major(partNode), minor(partNode));
 
+    if (fstype == NULL) {
+        fstype2 = getFsType((const char*)devicePath);
+    } else {
+        fstype2 = strdup(fstype);
+    }
+
     if (mDebug) {
-        SLOGI("Formatting volume %s (%s)", getLabel(), devicePath);
+        SLOGI("Formatting volume %s (%s) as %s", getLabel(), devicePath, fstype2);
+    }
+
+    /* If the device has no filesystem, let's default to vfat.
+     * A NULL fstype2 will cause a MAPERR in the format
+     * switch below */
+    if (fstype2 == NULL) {
+        fstype2 = strdup("vfat");
     }
 
-    if (Fat::format(devicePath, 0, wipe)) {
+    if (strcmp(fstype2, "exfat") == 0) {
+        ret = Exfat::format(devicePath);
+    } else if (strcmp(fstype2, "ext4") == 0) {
+        ret = Ext4::format(devicePath, 0, NULL);
+    } else if (strcmp(fstype2, "ntfs") == 0) {
+        ret = Ntfs::format(devicePath, wipe);
+    } else {
+        ret = Fat::format(devicePath, 0, wipe);
+    }
+
+    if (ret < 0) {
         SLOGE("Failed to format (%s)", strerror(errno));
-        goto err;
     }
 
-    ret = 0;
+    free(fstype2);
 
 err:
     setState(Volume::State_Idle);
@@ -314,7 +360,7 @@ bool Volume::isMountpointMounted(const char *path) {
 
 int Volume::mountVol() {
     dev_t deviceNodes[4];
-    int n, i, rc = 0;
+    int n, i = 0;
     char errmsg[255];
 
     int flags = getFlags();
@@ -414,6 +460,7 @@ int Volume::mountVol() {
 
     for (i = 0; i < n; i++) {
         char devicePath[255];
+        char *fstype = NULL;
 
         sprintf(devicePath, "/dev/block/vold/%d:%d", major(deviceNodes[i]),
                 minor(deviceNodes[i]));
@@ -423,25 +470,85 @@ int Volume::mountVol() {
         errno = 0;
         setState(Volume::State_Checking);
 
-        if (Fat::check(devicePath)) {
-            if (errno == ENODATA) {
-                SLOGW("%s does not contain a FAT filesystem\n", devicePath);
-                continue;
+        errno = 0;
+
+        fstype = getFsType((const char *)devicePath);
+
+        if (fstype != NULL) {
+            if (strcmp(fstype, "vfat") == 0) {
+
+                if (Fat::check(devicePath)) {
+                    errno = EIO;
+                    /* Badness - abort the mount */
+                    SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                    setState(Volume::State_Idle);
+                    free(fstype);
+                    return -1;
+                }
+
+                if (Fat::doMount(devicePath, getMountpoint(), false, false, false,
+                            AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
+                    SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+
+            } else if (strcmp(fstype, "ext4") == 0) {
+
+                if (Ext4::check(devicePath)) {
+                    errno = EIO;
+                    /* Badness - abort the mount */
+                    SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                    setState(Volume::State_Idle);
+                    free(fstype);
+                    return -1;
+                }
+
+                if (Ext4::doMount(devicePath, getMountpoint(), false, false, false)) {
+                    SLOGE("%s failed to mount via EXT4 (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+
+            } else if (strcmp(fstype, "ntfs") == 0) {
+
+                if (Ntfs::doMount(devicePath, getMountpoint(), false, false, false,
+                            AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
+                    SLOGE("%s failed to mount via NTFS (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+
+            } else if (strcmp(fstype, "exfat") == 0) {
+
+                if (Exfat::check(devicePath)) {
+                    errno = EIO;
+                    /* Badness - abort the mount */
+                    SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                    setState(Volume::State_Idle);
+                    free(fstype);
+                    return -1;
+                }
+
+                if (Exfat::doMount(devicePath, getMountpoint(), false, false, false,
+                        AID_MEDIA_RW, AID_MEDIA_RW, 0007)) {
+                    SLOGE("%s failed to mount via EXFAT (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+
+            } else {
+                // Unsupported filesystem
+                errno = ENODATA;
+                setState(Volume::State_Idle);
+                free(fstype);
+                return -1;
             }
-            errno = EIO;
-            /* Badness - abort the mount */
-            SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
-            setState(Volume::State_Idle);
-            return -1;
-        }
 
-        errno = 0;
-        int gid;
+            free(fstype);
 
-        if (Fat::doMount(devicePath, getMountpoint(), false, false, false,
-                AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
-            SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));
-            continue;
+        } else {
+            // Unsupported filesystem
+            errno = ENODATA;
+            setState(Volume::State_Idle);
+            free(fstype);
+            return -1;
         }
 
         extractMetadata(devicePath);
@@ -531,8 +638,6 @@ int Volume::doUnmount(const char *path, bool force) {
 }
 
 int Volume::unmountVol(bool force, bool revert) {
-    int i, rc;
-
     int flags = getFlags();
     bool providesAsec = (flags & VOL_PROVIDES_ASEC) != 0;
 
diff --git a/Volume.h b/Volume.h
index 1444ed3..fe0212a 100644
--- a/Volume.h
+++ b/Volume.h
@@ -69,7 +69,7 @@ public:
 
     int mountVol();
     int unmountVol(bool force, bool revert);
-    int formatVol(bool wipe);
+    int formatVol(bool wipe, const char *fstype = NULL);
 
     const char* getLabel() { return mLabel; }
     const char* getUuid() { return mUuid; }
diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index 14f1509..538c3b5 100644
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -290,7 +290,7 @@ int VolumeManager::listVolumes(SocketClient *cli, bool broadcast) {
     return 0;
 }
 
-int VolumeManager::formatVolume(const char *label, bool wipe) {
+int VolumeManager::formatVolume(const char *label, bool wipe, const char *fstype) {
     Volume *v = lookupVolume(label);
 
     if (!v) {
@@ -303,7 +303,7 @@ int VolumeManager::formatVolume(const char *label, bool wipe) {
         return -1;
     }
 
-    return v->formatVol(wipe);
+    return v->formatVol(wipe, fstype);
 }
 
 int VolumeManager::getObbMountPath(const char *sourceFile, char *mountPath, int mountPathLen) {
@@ -1216,8 +1216,6 @@ bool VolumeManager::isAsecInDirectory(const char *dir, const char *asecName) con
 
 int VolumeManager::findAsec(const char *id, char *asecPath, size_t asecPathLen,
         const char **directory) const {
-    int dirfd, fd;
-    const int idLen = strlen(id);
     char *asecName;
 
     if (!isLegalAsecId(id)) {
@@ -1297,7 +1295,6 @@ int VolumeManager::mountAsec(const char *id, const char *key, int ownerUid, bool
 
     char dmDevice[255];
     bool cleanupDm = false;
-    int fd;
     unsigned int nr_sec = 0;
     struct asec_superblock sb;
 
@@ -1832,8 +1829,12 @@ bool VolumeManager::isMountpointMounted(const char *mp)
 }
 
 int VolumeManager::cleanupAsec(Volume *v, bool force) {
-    int rc = 0;
+    // Only primary storage needs ASEC cleanup
+    if (!(v->getFlags() & VOL_PROVIDES_ASEC)) {
+        return 0;
+    }
 
+    int rc = 0;
     char asecFileName[255];
 
     AsecIdCollection removeAsec;
diff --git a/VolumeManager.h b/VolumeManager.h
index 17fa6f7..c97ad73 100644
--- a/VolumeManager.h
+++ b/VolumeManager.h
@@ -83,7 +83,7 @@ public:
     int shareVolume(const char *label, const char *method);
     int unshareVolume(const char *label, const char *method);
     int shareEnabled(const char *path, const char *method, bool *enabled);
-    int formatVolume(const char *label, bool wipe);
+    int formatVolume(const char *label, bool wipe, const char *fstype = NULL);
     void disableVolumeManager(void) { mVolManagerDisabled = 1; }
 
     /* ASEC */
diff --git a/main.cpp b/main.cpp
index d4b7d28..56339ef 100644
--- a/main.cpp
+++ b/main.cpp
@@ -182,8 +182,7 @@ static int process_config(VolumeManager *vm)
                 flags |= VOL_ENCRYPTABLE;
             }
             /* Only set this flag if there is not an emulated sd card */
-            if (fs_mgr_is_noemulatedsd(&fstab->recs[i]) &&
-                !strcmp(fstab->recs[i].fs_type, "vfat")) {
+            if (fs_mgr_is_noemulatedsd(&fstab->recs[i])) {
                 flags |= VOL_PROVIDES_ASEC;
             }
             dv = new DirectVolume(vm, &(fstab->recs[i]), flags);
-- 
1.7.9.5

